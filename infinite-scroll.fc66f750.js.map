{"mappings":"6kBAMA,MAAMA,EAAU,IAAI,EAAAC,EAAAC,YAEpBC,EAAAC,KAAKC,cAAcC,iBAAiB,UAuCpCC,eAA4BC,GAC1BA,EAAIC,iBAEJ,MACEC,UAAUC,YAAEA,IACVH,EAAII,cAEFC,EAAQF,EAAYG,MAAMC,OAAOC,cACvC,IAAKH,EACH,OAGFb,EAAQW,YAAcE,EACtBI,IACAd,EAAAC,KAAKc,eAAeC,UAAUC,IAAI,mBAElC,IACE,MAAMC,KAAEA,EAAIC,MAAEA,SAAgBtB,EAAQuB,YACtC,GAAoB,IAAhBF,EAAKG,OAIP,YAHAC,EAAAC,GAASC,OAAOC,QACd,4EAIJ,MAAMC,GAAS,EAAAC,EAAAC,cAAaV,GAU5B,GATAlB,EAAAC,KAAK4B,QAAQC,mBAAmB,YAAaJ,GAE7C7B,EAAQkC,oBAAoBZ,GAC5BG,EAAAC,GAASC,OAAOQ,QAAQ,oBAAoBb,YAAiB,CAC3Dc,QAAS,IACTC,SAAU,aAIRrC,EAAQsC,eAAgB,CAE1B,MAAMC,EAASC,SAASC,cAAc,0BAEtCC,EAAGC,QAAQJ,E,EAEb,MAAOK,GACPC,QAAQC,IAAIF,GACZ3B,G,KAhFJd,EAAAC,KAAKc,eAAeZ,iBAAiB,SAoFrC,WACEN,EAAQ+C,gBAEH/C,EAAQsC,iBACXnC,EAAAC,KAAKc,eAAeC,UAAUC,IAAI,mBAClCK,EAAAC,GAASC,OAAOqB,KACd,+DAIJhD,EACGuB,YACA0B,MAAK,EAAC5B,KAAEA,MACP,MAAMQ,GAAS,EAAAC,EAAAC,cAAaV,GAC5BlB,EAAAC,KAAK4B,QAAQC,mBAAmB,YAAaJ,EAAO,IAErDqB,OAAMN,IACLC,QAAQC,IAAIF,GACZ3B,GAAW,G,IApGjB,MAkCMyB,EAAK,IAAIS,sBA7BE5C,eAAgB6C,EAASC,GACxCD,EAAQE,SAAQ/C,MAAMgD,IACpB,GAAIA,EAAMC,eAAgB,CACxBX,QAAQC,IAAIS,EAAME,kBAClBzD,EAAQ+C,gBAERM,EAASK,UAAUH,EAAMhB,QAEzBd,EAAAC,GAASC,OAAOqB,KACd,8DAGF,IACE,MAAM3B,KAAEA,SAAerB,EAAQuB,YAEzBM,GAAS,EAAAC,EAAAC,cAAaV,GAE5B,GADAlB,EAAAC,KAAK4B,QAAQC,mBAAmB,YAAaJ,GACzC7B,EAAQsC,eAAgB,CAC1B,MAAMC,EAASC,SAASC,cAAc,0BAEtCC,EAAGC,QAAQJ,E,EAEb,MAAOK,GACPC,QAAQC,IAAIF,GACZ3B,G,QA7BQ,CACd0C,KAAM,KACNC,WAAY,QACZC,UAAW,IAqGb,SAAS5C,IACPjB,EAAQ8D,YACR3D,EAAAC,KAAK4B,QAAQ+B,UAAY,E","sources":["src/infinite-scroll.js"],"sourcesContent":["import './css/styles.css';\nimport { PixabayAPI } from './PixabayAPI';\nimport { createMarkup } from './createMarkup';\nimport { refs } from './refs';\nimport Notiflix from 'notiflix';\n\nconst pixabay = new PixabayAPI();\n\nrefs.searchFormRef.addEventListener('submit', handleSubmit);\nrefs.loadMoreBtnRef.addEventListener('click', onLoadMoreClick);\n\nconst options = {\n  root: null,\n  rootMargin: '100px',\n  threshold: 1.0,\n};\nconst callback = async function (entries, observer) {\n  entries.forEach(async entry => {\n    if (entry.isIntersecting) {\n      console.log(entry.intersectionRect);\n      pixabay.incrementPage();\n\n      observer.unobserve(entry.target);\n\n      Notiflix.Notify.info(\n        \"We're sorry, but you've reached the end of search results.\"\n      );\n\n      try {\n        const { hits } = await pixabay.getPhotos();\n\n        const markup = createMarkup(hits);\n        refs.listRef.insertAdjacentHTML('beforeend', markup);\n        if (pixabay.isShowLoadMore) {\n          const target = document.querySelector('.photo-card:last-child');\n\n          io.observe(target);\n        }\n      } catch (error) {\n        console.log(error);\n        clearPage();\n      }\n    }\n  });\n};\nconst io = new IntersectionObserver(callback, options);\n\nasync function handleSubmit(evt) {\n  evt.preventDefault();\n\n  const {\n    elements: { searchQuery },\n  } = evt.currentTarget;\n\n  const query = searchQuery.value.trim().toLowerCase();\n  if (!query) {\n    return;\n  }\n\n  pixabay.searchQuery = query;\n  clearPage();\n  refs.loadMoreBtnRef.classList.add('visually-hidden');\n\n  try {\n    const { hits, total } = await pixabay.getPhotos();\n    if (hits.length === 0) {\n      Notiflix.Notify.failure(\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      return;\n    }\n    const markup = createMarkup(hits);\n    refs.listRef.insertAdjacentHTML('beforeend', markup);\n\n    pixabay.calculateTotalPages(total);\n    Notiflix.Notify.success(`Hooray! We found ${total} images.`, {\n      timeout: 1000,\n      position: 'left-top',\n    });\n    // console.log(pixabay);\n\n    if (pixabay.isShowLoadMore) {\n      //   refs.loadMoreBtnRef.classList.remove('visually-hidden');\n      const target = document.querySelector('.photo-card:last-child');\n\n      io.observe(target);\n    }\n  } catch (error) {\n    console.log(error);\n    clearPage();\n  }\n}\n\nfunction onLoadMoreClick() {\n  pixabay.incrementPage();\n\n  if (!pixabay.isShowLoadMore) {\n    refs.loadMoreBtnRef.classList.add('visually-hidden');\n    Notiflix.Notify.info(\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n  }\n\n  pixabay\n    .getPhotos()\n    .then(({ hits }) => {\n      const markup = createMarkup(hits);\n      refs.listRef.insertAdjacentHTML('beforeend', markup);\n    })\n    .catch(error => {\n      console.log(error);\n      clearPage();\n    });\n}\n\nfunction clearPage() {\n  pixabay.resetPage();\n  refs.listRef.innerHTML = '';\n}\n"],"names":["$6facc72073722961$var$pixabay","$8XIVS","PixabayAPI","$cLm0d","refs","searchFormRef","addEventListener","async","evt","preventDefault","elements","searchQuery","currentTarget","query","value","trim","toLowerCase","$6facc72073722961$var$clearPage","loadMoreBtnRef","classList","add","hits","total","getPhotos","length","$parcel$interopDefault","$eWCmQ","Notify","failure","markup","$lNb2b","createMarkup","listRef","insertAdjacentHTML","calculateTotalPages","success","timeout","position","isShowLoadMore","target","document","querySelector","$6facc72073722961$var$io","observe","error","console","log","incrementPage","info","then","catch","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","intersectionRect","unobserve","root","rootMargin","threshold","resetPage","innerHTML"],"version":3,"file":"infinite-scroll.fc66f750.js.map"}