{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,iEAMMC,EAAU,IAAI,EAAAC,EAAAC,YAEpBC,EAAAC,KAAKC,cAAcC,iBAAiB,U,SAuCRC,G,OAAbC,EAAYC,MAAAC,KAAAC,U,IAtC3BR,EAAAC,KAAKQ,eAAeN,iBAAiB,SAoFrC,WACEN,EAAQa,gBAEHb,EAAQc,iBACXX,EAAAC,KAAKQ,eAAeG,UAAUC,IAAI,mBAClCC,EAAAC,GAASC,OAAOC,KACd,+DAIJpB,EACGqB,YACAC,MAAK,SAAAC,G,IAAGC,EAAID,EAAJC,KACDC,GAAS,EAAAC,EAAAC,cAAaH,GAC5BrB,EAAAC,KAAKwB,QAAQC,mBAAmB,YAAaJ,E,IAE9CK,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZG,G,OApGN,I,EAKMC,G,EAAWlB,EAAAnB,EAAA,CAAAmB,EAAAmB,GAAAC,MAAA,SAAAC,EAAgBC,EAASC,G,kEACxCD,EAAQE,QAAO,W,MAACxB,EAAAnB,EAAA,CAAAmB,EAAAmB,GAAAC,MAAA,SAAAK,EAAMC,G,IAYRnB,EAEFC,EAGEmB,E,sEAhBRD,EAAME,eAAc,C,uBACtBb,QAAQC,IAAIU,EAAMG,kBAClB9C,EAAQa,gBAER2B,EAASO,UAAUJ,EAAMC,QAEzB3B,EAAAC,GAASC,OAAOC,KACd,8D,kBAIuBpB,EAAQqB,Y,OAAzBG,EAAMwB,EAAAC,KAAJzB,KAEFC,GAAS,EAAAC,EAAAC,cAAaH,GAC5BrB,EAAAC,KAAKwB,QAAQC,mBAAmB,YAAaJ,GACzCzB,EAAQc,iBACJ8B,EAASM,SAASC,cAAc,0BAEtCC,EAAGC,QAAQT,I,kDAGbZ,QAAQC,IAAGe,EAAAM,IACXpB,I,0EAvBgBS,G,gCAAP,I,oDADgBJ,EAASC,G,iCA6BpCY,EAAK,IAAIG,qBAAqBpB,EAlCpB,CACdqB,KAAM,KACNC,WAAY,QACZC,UAAW,I,SAiCElD,I,OAAAA,EAAfS,EAAAnB,EAAA,CAAAmB,EAAAmB,GAAAC,MAAA,SAAAK,EAA4BnC,G,IAKtBoD,EADUC,EAGRC,EAUoBC,EAAhBtC,EAAMuC,EAORtC,EAYEmB,E,qEAnCVrC,EAAIyD,iBAIAL,EAAApD,EAAI0D,cADNL,EACED,EADFO,SAAYN,YAGRC,EAAQD,EAAYO,MAAMC,OAAOC,cAC7B,C,uDAIVrE,EAAQ4D,YAAcC,EACtB3B,IACA/B,EAAAC,KAAKQ,eAAeG,UAAUC,IAAI,mB,mBAGFhB,EAAQqB,Y,WAAdyC,EAAyBd,EAAAC,KAAzCzB,EAAgBsC,EAAhBtC,KAAMuC,EAAUD,EAAVC,MACM,IAAhBvC,EAAK8C,OAAY,C,uBACnBrD,EAAAC,GAASC,OAAOoD,QACd,4E,2BAIE9C,GAAS,EAAAC,EAAAC,cAAaH,GAC5BrB,EAAAC,KAAKwB,QAAQC,mBAAmB,YAAaJ,GAE7CzB,EAAQwE,oBAAoBT,GAC5B9C,EAAAC,GAASC,OAAOsD,QAAQ,oBAA0BC,OAANX,EAAM,YAAW,CAC3DY,QAAS,IACTC,SAAU,aAIR5E,EAAQc,iBAEJ8B,EAASM,SAASC,cAAc,0BAEtCC,EAAGC,QAAQT,I,kDAGbZ,QAAQC,IAAGe,EAAAM,IACXpB,I,2DA1CuBzB,MAAAC,KAAAC,U,CAoE3B,SAASuB,IACPlC,EAAQ6E,YACR1E,EAAAC,KAAKwB,QAAQkD,UAAY,E","sources":["src/infinite-scroll.js"],"sourcesContent":["import './css/styles.css';\nimport { PixabayAPI } from './PixabayAPI';\nimport { createMarkup } from './createMarkup';\nimport { refs } from './refs';\nimport Notiflix from 'notiflix';\n\nconst pixabay = new PixabayAPI();\n\nrefs.searchFormRef.addEventListener('submit', handleSubmit);\nrefs.loadMoreBtnRef.addEventListener('click', onLoadMoreClick);\n\nconst options = {\n  root: null,\n  rootMargin: '100px',\n  threshold: 1.0,\n};\nconst callback = async function (entries, observer) {\n  entries.forEach(async entry => {\n    if (entry.isIntersecting) {\n      console.log(entry.intersectionRect);\n      pixabay.incrementPage();\n\n      observer.unobserve(entry.target);\n\n      Notiflix.Notify.info(\n        \"We're sorry, but you've reached the end of search results.\"\n      );\n\n      try {\n        const { hits } = await pixabay.getPhotos();\n\n        const markup = createMarkup(hits);\n        refs.listRef.insertAdjacentHTML('beforeend', markup);\n        if (pixabay.isShowLoadMore) {\n          const target = document.querySelector('.photo-card:last-child');\n\n          io.observe(target);\n        }\n      } catch (error) {\n        console.log(error);\n        clearPage();\n      }\n    }\n  });\n};\nconst io = new IntersectionObserver(callback, options);\n\nasync function handleSubmit(evt) {\n  evt.preventDefault();\n\n  const {\n    elements: { searchQuery },\n  } = evt.currentTarget;\n\n  const query = searchQuery.value.trim().toLowerCase();\n  if (!query) {\n    return;\n  }\n\n  pixabay.searchQuery = query;\n  clearPage();\n  refs.loadMoreBtnRef.classList.add('visually-hidden');\n\n  try {\n    const { hits, total } = await pixabay.getPhotos();\n    if (hits.length === 0) {\n      Notiflix.Notify.failure(\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      return;\n    }\n    const markup = createMarkup(hits);\n    refs.listRef.insertAdjacentHTML('beforeend', markup);\n\n    pixabay.calculateTotalPages(total);\n    Notiflix.Notify.success(`Hooray! We found ${total} images.`, {\n      timeout: 1000,\n      position: 'left-top',\n    });\n    // console.log(pixabay);\n\n    if (pixabay.isShowLoadMore) {\n      //   refs.loadMoreBtnRef.classList.remove('visually-hidden');\n      const target = document.querySelector('.photo-card:last-child');\n\n      io.observe(target);\n    }\n  } catch (error) {\n    console.log(error);\n    clearPage();\n  }\n}\n\nfunction onLoadMoreClick() {\n  pixabay.incrementPage();\n\n  if (!pixabay.isShowLoadMore) {\n    refs.loadMoreBtnRef.classList.add('visually-hidden');\n    Notiflix.Notify.info(\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n  }\n\n  pixabay\n    .getPhotos()\n    .then(({ hits }) => {\n      const markup = createMarkup(hits);\n      refs.listRef.insertAdjacentHTML('beforeend', markup);\n    })\n    .catch(error => {\n      console.log(error);\n      clearPage();\n    });\n}\n\nfunction clearPage() {\n  pixabay.resetPage();\n  refs.listRef.innerHTML = '';\n}\n"],"names":["$bpxeT","parcelRequire","$197be06ee8836f34$var$pixabay","$evVGa","PixabayAPI","$foHtm","refs","searchFormRef","addEventListener","evt","$197be06ee8836f34$var$_handleSubmit","apply","this","arguments","loadMoreBtnRef","incrementPage","isShowLoadMore","classList","add","$parcel$interopDefault","$iU1Pc","Notify","info","getPhotos","then","param","hits","markup","$uIGk8","createMarkup","listRef","insertAdjacentHTML","catch","error","console","log","$197be06ee8836f34$var$clearPage","$197be06ee8836f34$var$callback","$2TvXO","mark","_callee1","entries","observer","forEach","_callee","entry","target","isIntersecting","intersectionRect","unobserve","_ctx","sent","document","querySelector","$197be06ee8836f34$var$io","observe","t0","IntersectionObserver","root","rootMargin","threshold","_currentTarget","searchQuery","query","ref","total","preventDefault","currentTarget","elements","value","trim","toLowerCase","length","failure","calculateTotalPages","success","concat","timeout","position","resetPage","innerHTML"],"version":3,"file":"infinite-scroll.9ef9f697.js.map"}